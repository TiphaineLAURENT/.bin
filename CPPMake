#!/bin/bash

########### CONSTANT VARIABLES ###########

BITS32="i686"
BITS64="x86_64"

HEADER_DIR="include"
SRC_DIR="src"
CLASS_DIR="class"
BIN_DIR="bin"

DEFAULT_SRC_FILE="main.cpp"

##########################################

add_libmath()
{
    echo "Does your Makefile needs the Math lib ? : [o/n]"
    read libm
    echo
    local libm="${libm,,}"

    if [[ "$libm" == "yes" ]] || [[ "$libm" == "oui" ]] ||
	   [[ "$libm" == "y" ]] || [[ "$libm" == "o" ]];
    then
	if [[ "$lib" == "on" ]];
	then
	    echo -e "LDLIBS\t\t+=\t-lm" >> Makefile
	else
	    echo -e "LDLIBS\t\t=\t-lm" >> Makefile
	fi
	lib="on"
    fi
}

add_libopengl()
{
    echo "Does your Makefile needs the OpenGL lib ? : [o/n]"
    read libGL
    echo
    local libGL="${libGL,,}"

    if [[ "$libGL" == "yes" ]] || [[ "$libGL" == "oui" ]] ||
	   [[ "$libGL" == "y" ]] || [[ "$libGL" == "o" ]];
    then
	if [[ "$lib" == "on" ]];
	then
	    echo -e "LDLIBS\t\t+=\t-lGL" >> Makefile
	else
	    echo -e "LDLIBS\t\t=\t-lGL" >> Makefile
	fi
	lib="on"
    fi
}

add_libsfml()
{
    echo "Does your Makefile needs the SFML lib ? : [o/n]"
    read libsfml
    echo
    local libsfml="${libsfml,,}"

    if [[ "$libsfml" == "yes" ]] || [[ "$libsfml" == "oui" ]] ||
	   [[ "$libsfml" == "y" ]] || [[ "$libsfml" == "o" ]];
    then
	if [[ "$lib" == "on" ]];
	then
	    echo -e "LDLIBS\t\t+=\t-lsfml-audio -lsfml-graphics -lsfml-network -lsfml-system -lsfml-window" >> Makefile
	else
	    echo -e "LDLIBS\t\t=\t-lsfml-audio -lsfml-graphics -lsfml-network -lsfml-system -lsfml-window" >> Makefile
	fi
	lib="on"
    fi
}

add_flags()
{
    echo -e "CXXFLAGS\t=\t-W -Wall -Wextra -Werror -Wshadow -Wunreachable-code -Wconversion" >> Makefile
    echo -e "CXXFLAGS\t+=\t-Wswitch-default -Wswitch-enum" >> Makefile
    echo -e "CXXFLAGS\t+=\t-Wuninitialized -Winit-self" >> Makefile
    echo -e "CXXFLAGS\t+=\t-fstack-protector-strong" >> Makefile
    echo -ne "CXXFLAGS\t+=\t-pedantic" >> Makefile

    echo "Do you need to compile using an other standard version than C++17 ? : [n/version]"
    read cstd
    echo
    local cstd="${cstd,,}"

    if [[ "$cstd" == "no" ]] || [[ "$cstd" == "non" ]] ||
	   [[ "$cstd" == "n" ]];
    then
	echo >> Makefile
    else
	echo -n " -std=" >> Makefile
	echo $cstd >> Makefile
    fi

    if [[ $HOSTTYPE == $BITS32 ]];
    then
	echo -e "CXXFLAGS\t+=\t-Wdouble-promotion" >> Makefile
    fi

    echo "Are you compling for you own platform ? : [o/platform]"
    read platform
    echo
    local platform="${platform,,}"

    if [[ "$platform" == "yes" ]] || [[ "$platform" == "oui" ]] ||
	   [[ "$platform" == "y" ]] || [[ "$platform" == "o" ]];
    then
	echo -ne "CXXFLAGS\t+=\t-march=native" >> Makefile
    else
	echo -ne "CXXFLAGS\t+=\t-march=$platform" >> Makefile
    fi

    echo "Do you want to keep preprocessor and assembly file (.ii and .s) ? : [o/n]"
    read temp
    echo
    temp="${temp,,}"

    if [[ "$temp" == "yes" ]] || [[ "$temp" == "oui" ]] ||
	   [[ "$temp" == "y" ]] || [[ "$temp" == "o" ]];
    then
	temp="on"
	echo " -save-temps" >> Makefile
    fi

    echo >> Makefile
}

make_n() {
    echo -e "XX\t\t=\tg++" >> Makefile
    echo >> Makefile

    echo -e "RM\t\t=\trm -f" >> Makefile
    echo >> Makefile

    add_flags

    echo -e "CPPFLAGS\t=\t-I $HEADER_DIR" >> Makefile
    echo >> Makefile

    add_libmath
    add_libopengl
    add_libsfml
    if [[ "$lib" == "on" ]];
       then
	   echo >> Makefile
    fi

    echo -e "CLASS_DIR\t=\t$CLASS_DIR" >> Makefile
    echo -e "CLASS_SRC\t=\t\\" >> Makefile
    echo >> Makefile

    echo -e "SRC_DIR\t\t=\t$SRC_DIR" >> Makefile
    echo -e "SRC_FILES\t=\t\$(addprefix \$(CLASS_DIR)/, \$(CLASS_SRC))\t\\" >> Makefile
    echo -e "\t\t\t$DEFAULT_SRC_FILE\t\t\t\t\t\\" >> Makefile
    echo >> Makefile

    echo -e "SRCS\t\t=\t\$(addprefix \$(SRC_DIR)/, \$(SRC_FILES))" >> Makefile
    if [[ "$temp" == "on" ]];
    then
	echo -e "SRCS_NAME\t=\t\$(basename \$(SRCS))" >> Makefile
	echo -e "SRCS_TEMP\t=\t\$(notdir \$(SRCS_NAME).s \$(SRCS_NAME).ii)" >> Makefile
    fi
    echo >> Makefile

    echo -e "OBJS\t\t=\t\$(SRCS:.cpp=.o)" >> Makefile
    echo >> Makefile

    echo "Binary Name"
    read bin_name
    echo

    echo -e "BIN_DIR\t\t=\t$BIN_DIR" >> Makefile
    echo -e "BIN_NAME\t=\t$bin_name" >> Makefile
    echo -e "NAME\t\t=\t\$(addprefix \$(BIN_DIR)/, \$(BIN_NAME))" >> Makefile
    echo >> Makefile

    echo -e "all:\t\t\$(NAME)" >> Makefile
    echo >> Makefile

    echo -e "\$(NAME):\t\$(OBJS)" >> Makefile

    if [[ "$lib" == "on" ]];
    then
	echo -e "\t\t\$(XX) -o \$(NAME) \$(OBJS) \$(LDLIBS)" >> Makefile
    else
	echo -e	"\t\t\$(XX) -o \$(NAME) \$(OBJS)" >> Makefile
    fi

    echo >> Makefile

    echo "clean:" >> Makefile
    echo -e "\t\t\$(RM) \$(OBJS)" >> Makefile
    if [[ "$temp" == "on" ]];
    then
	echo -e "\t\t\$(RM) \$(SRCS_TEMP)" >> Makefile
    fi
    echo >> Makefile

    echo -e "fclean:\t\tclean" >> Makefile
    echo -e "\t\t\$(RM) \$(NAME)" >> Makefile
    echo >> Makefile

    echo -e "re:\t\tfclean all" >> Makefile
    echo >> Makefile

    echo -e ".PHONY:\t\tall clean fclean re" >> Makefile
}

header()
{
    clear
    for i in $(eval echo "{1..$(tput cols)}"); do echo -n "T"; done
    echo
    echo
}

header

echo "##Press Ctrl+H then enter this file name and press enter" > Makefile
echo >> Makefile

make_n
