#!/bin/bash

############################
#			   #
# Made by Tiphaine LAURENT #
#			   #
############################

########### CONSTANT VARIABLES ###########

BITS32="i686"
BITS64="x86_64"

HEADER_DIR="include"
SRC_DIR="src"
UTIL_DIR="util"
BIN_DIR="bin"

DEFAULT_SRC_FILE="main.c"

linker="LDFLAGS\t\t=\t"

##########################################

add_libmy()
{
    echo "Does your Makefile needs your EPITECH library ? : [o/n]"
    read libmy
    echo
    local libmy=${libmy,,}

    if [[ $libmy == "o" ]] || [[ $libmy == "oui" ]] ||
	   [[ $libmy == "y" ]] || [[ $libmy == "yes" ]];
    then
	echo -e "LDLIBS\t\t=\t-lmy" >> Makefile
	lib="on"
	linker+="-Llibs_srcs"
    fi
}

add_libmath()
{
    echo "Does your Makefile needs the math lib ? : [o/n]"
    read libm
    echo
    local libm=${libm,,}

    if [[ $libm == "o" ]] || [[ $libm == "oui" ]] ||
	   [[ $libm == "y" ]] || [[ $libm == "yes" ]];
    then
	if [[ $lib == "on" ]];
	then
	    echo -e "LDLIBS\t\t+=\t-lm" >> Makefile
	else
	    echo -e "LDLIBS\t\t=\t-lm" >> Makefile
	fi
	lib="on"
    fi
}

add_libcsfml()
{
    echo "Does your Makefile needs the CSFML lib ? : [o/n]"
    read libcsfml
    echo
    local libcsfml=${libcsfml,,}

    if [[ $libcsfml == "o" ]] || [[ $libcsfml == "oui" ]] ||
	   [[ $libcsfml == "y" ]] || [[ $libcsfml == "yes" ]];
    then
	if [[ $lib == "on" ]];
	then
	    echo -e "LDLIBS\t\t+=\t-lc_graph_prog_full" >> Makefile
	else
	    echo -e "LDLIBS\t\t=\t-lc_graph_prog_full" >> Makefile
	fi
	lib="on"
    fi
}

add_flags()
{
    echo -e "CFLAGS\t\t=\t-W -Wall -Wextra -Werror -Wshadow -Wunreachable-code -Wconversion -Wstrict-prototypes" >> Makefile
    echo -e "CFLAGS\t\t+=\t-Wswitch-default -Wswitch-enum" >> Makefile
    echo -e "CFLAGS\t\t+=\t-Wuninitialized -Winit-self" >> Makefile
    echo -e "CFLAGS\t\t+=\t-fstack-protector-strong" >> Makefile
    echo -e "CFLAGS\t\t+=\t-pedantic" >> Makefile

    if [[ $HOSTTYPE == $BITS32 ]];
    then
	echo -e "CFLAGS\t\t+=\t-Wdouble-promotion" >> Makefile
    fi

    echo "Are you compling for you own platform ? [o/platform]"
    read platform
    echo
    local platform=${platform,,}

    if [[ $platform == "yes" ]] || [[ $platform == "oui" ]] ||
	   [[ $platform == "y" ]] || [[ $platform == "o" ]];
    then
	echo -ne "CFLAGS\t\t+=\t-march=native" >> Makefile
    else
	echo -ne "CFLAGS\t\t+=\t-march=$platform" >> Makefile
    fi

    echo "Do you want to keep preprocessor and assembly file (.ii and .s) ?"
    read temp
    echo
    temp=${temp,,}

    if [[ $temp == "yes" ]] || [[ $temp == "oui" ]] ||
	   [[ $temp == "y" ]] || [[ $temp == "o" ]];
    then
	temp="on"
	echo " -save-temps" >> Makefile
    fi

    echo >> Makefile
}

add_src_files()
{
    local arr=($(find src -type f \( -name "*.c" \))) # ! -iname $DEFAULT_SRC_FILE 
    for i in ${arr[@]}; do
	echo -e "\t\t\t${i:4}\t\t\t\\" >> Makefile
    done
}

make_n() {
    echo -e "CC\t\t=\tgcc" >> Makefile
    echo >> Makefile

    echo -e "RM\t\t=\trm -f" >> Makefile
    echo >> Makefile

    add_flags

    if [[ ! -d $HEADER_DIR ]];
    then
	echo "Creating $HEADER_DIR/ directory"
	mkdir $HEADER_DIR
    fi

    echo -e "CPPFLAGS\t=\t-I $HEADER_DIR" >> Makefile
    echo >> Makefile

    add_libmy
    add_libmath
    add_libcsfml
    if [[ $linker != "LDFLAGS\t\t=\t" ]];
    then
	echo -e $linker >> Makefile
    fi
    if [[ $lib == "on" ]];
    then
	echo >> Makefile
    fi

    echo -e "UTIL_DIR\t=\t$UTIL_DIR" >> Makefile
    echo -e "UTIL_SRC\t=\t\\" >> Makefile
    echo >> Makefile

    echo -e "SRC_DIR\t\t=\t$SRC_DIR" >> Makefile
    echo -e "SRC_FILES\t=\t\$(addprefix \$(UTIL_DIR)/, \$(UTIL_SRC))\t\\" >> Makefile

    if [[ ! -d $SRC_DIR ]];
    then
	echo "Creating $SRC_DIR/ directory"
	mkdir $SRC_DIR
	touch $SRC_DIR"/"$DEFAULT_SRC_FILE
    fi
    add_src_files

    echo >> Makefile
    if [[ ! -d $SRC_DIR/$UTIL_DIR ]];
    then
	echo "Creating $UTIL_DIR/ directory"
	mkdir $SRC_DIR/$UTIL_DIR
    fi

    echo -e "SRCS\t\t=\t\$(addprefix \$(SRC_DIR)/, \$(SRC_FILES))" >> Makefile
    if [[ $temp == "on" ]];
    then
	echo -e "SRCS_NAME\t=\t\$(basename \$(SRCS))" >> Makefile
	echo -e "SRCS_TEMP\t=\t\$(notdir \$(SRCS_NAME).s \$(SRCS_NAME).i)" >> Makefile
    fi
    echo >> Makefile

    echo -e "OBJS\t\t=\t\$(SRCS:.c=.o)" >> Makefile
    echo >> Makefile

    echo "Binary Name"
    read bin_name
    echo

    if [[ ! -d $BIN_DIR ]];
    then
	echo "Creating $BIN_DIR/ directory"
	mkdir $BIN_DIR
    fi

    echo -e "BIN_DIR\t\t=\t$BIN_DIR" >> Makefile
    echo -e "BIN_NAME\t=\t$bin_name" >> Makefile
    echo -e "NAME\t\t=\t\$(addprefix \$(BIN_DIR)/, \$(BIN_NAME))" >> Makefile
    echo >> Makefile

    echo -e "all:\t\t\$(NAME)" >> Makefile
    echo >> Makefile

    echo -e "\$(NAME):\t\$(OBJS)" >> Makefile

    echo -ne "\t\t\$(CC) -o \$(NAME) \$(OBJS)" >> Makefile
    if [[ $lib == "on" ]];
    then
	echo -ne " \$(LDLIBS)" >> Makefile
    fi
    if [[ $linker != "LDFLAGS\t\t=\t" ]];
    then
	echo -ne " \$(LDFLAGS)" >> Makefile
    fi

    echo >> Makefile
    echo >> Makefile

    echo "clean:" >> Makefile
    echo -e "\t\t\$(RM) \$(OBJS)" >> Makefile
    if [[ $temp == "on" ]];
    then
	echo -e "\t\t\$(RM) \$(SRCS_TEMP)" >> Makefile
    fi
    echo >> Makefile

    echo -e "fclean:\t\tclean" >> Makefile
    echo -e "\t\t\$(RM) \$(NAME)" >> Makefile
    echo >> Makefile

    echo -e "re:\t\tfclean all" >> Makefile
    echo >> Makefile

    echo -e ".PHONY:\t\tall clean fclean re" >> Makefile
}

header()
{
    clear
    for i in $(eval echo "{1..$(tput cols)}"); do echo -n "T"; done
    echo
    echo
}

header

echo "##Press Ctrl-C+H then enter this file name and press enter" > Makefile
echo >> Makefile

make_n
